Q1) • Can you name the main components running inside Cloud Foundry? Do you know what each of them does?
https://cloudacademy.com/blog/cloud-foundry-components/
https://docs.cloudfoundry.org/concepts/architecture/
Routing -- Router
Authentication -- OAuth2 Server (UAA) and Login Server
App Lifecycle -- Cloud Controller and Diego Brain,, nsync, BBS, and Cell Reps
App Storage and Execution -- Blobstore, Diego Cell
Services -- Service Brokers
Messaging -- Consul and BBS
Metrics and Logging -- Loggregator, Metrics Collector

Q2) • What does Diego refer to?
https://docs.cloudfoundry.org/concepts/diego/diego-architecture.html
Cloud Foundry has used two architectures for managing application containers: Droplet Execution Agents (DEA) and Diego. With the DEA architecture, the Cloud Controller schedules and manages applications on the DEA nodes. In the newer Diego architecture, Diego components replace the DEAs and the Health Manager (HM9000), and assume application scheduling and management responsibility from the Cloud Controller.

Diego Core Components
Components in the Diego core run and monitor Tasks and LRPs. The core consists of the following major areas:
Brain
Cells
Database VMs
Access VMs
Consul


Q3) • What is Garden?
Garden, the component that Cloud Foundry uses to create and manage isolated environments called containers. Each instance of an application deployed to Cloud Foundry runs within a container.
Garden has pluggable backends for different platforms and runtimes, and specifies a set of interfaces that each platform-specific backend must implement. These interfaces contain methods to perform the following actions:
Create and delete containers
Apply resource limits to containers
Open and attach network ports to containers
Copy files into and out of containers
Run processes within containers
Stream STDOUT and STDERR data out of containers
Annotate containers with arbitrary metadata
Snapshot containers for redeploys without downtime

Cloud Foundry currently uses the Garden-runC backend, a Linux-specific implementation of the Garden interface using the Open Container Interface (OCI) standard. Previous versions of Cloud Foundry used the Garden-Linux backend.

Q4) • What components run in a Diego Cell?
https://docs.pivotal.io/pivotalcf/1-9/concepts/diego/diego-architecture.html#cell-components
Diego Cell components manage and maintain Tasks and LRPs.

Rep
Represents a Cell in Diego Auctions for Tasks and LRPs
Mediates all communication between the Cell and the BBS
Ensures synchronization between the set of Tasks and LRPs in the BBS with the containers present on the Cell
Maintains the presence of the Cell in the BBS
Runs Tasks and LRPs by asking the in-process Executor to create a container and RunAction recipes

Executor
Runs as a logical process inside the Rep
Implements the generic Executor actions detailed in the API documentation
Streams STDOUT and STDERR to the Metron agent running on the Cell

Garden
Provides a platform-independent server and clients to manage Garden containers
Defines the Garden-runC interface for container implementation

Metron Agent
Forwards application logs, errors, and application and Diego metrics to the Loggregator Doppler component

Q5) • What is the System domain? And the application domain?

Q6) • What is Cloud Foundry’s API endpoint for?
The API endpoint, or target URL, for your Cloud Foundry instance is the URL of the Cloud Controller.
Find your Cloud Controller API endpoint by consulting your cloud operator, from the Apps Manager, or from the command line.
cf api
API endpoint: https://api.example.com (API version: 2.55.0)

Q6) • What is a container? What is it used for?
Each instance of an app deployed to CF runs within its own self-contained environment, a Garden container. This container isolates processes, memory, and the filesystem using operating system features and the characteristics of the virtual and physical infrastructure where CF is deployed.
CF achieves container isolation by namespacing kernel resources that would otherwise be shared. The intended level of isolation is set to prevent multiple containers that are present on the same host from detecting each other. Every container includes a private root filesystem, which includes a Process ID (PID), namespace, network namespace, and mount namespace.
CF creates the container filesystem by stacking a read-only base filesystem and a container-specific read-write filesystem, commonly known as an overlay filesystem. The read-only filesystem contains the minimal set of operating system packages and Garden-specific modifications common to all containers. Containers can share the same read-only base filesystem because all writes are applied to the read-write filesystem. The read-write filesystem is unique to each container and is created by formatting a large sparse file of a fixed size. This fixed size prevents the read-write filesystem from overflowing into unallocated space.
Resource control is managed using Linux control groups (cgroups). Associating each container with its own cgroup or job object limits the amount of memory that the container may use. Linux cgroups also require the container to use a fair share of CPU compared to the relative CPU share of other containers.

Q7) • What is a droplet? How is it created? Where is it stored?
Droplet is the Cloud Foundry unit of execution. Once an application is pushed to Cloud Foundry and deployed using a buildpack, the result is a droplet. A droplet, therefore, is nothing but an abstraction on top of the application that contains information like metadata. Those droplets are stored in blob storage for further deployment processes.
This is the full output of the staging process. It includes the application bits plus any additional software that is necessary to run your application.
The Cloud Controller issues a staging request to Diego, which then schedules a Cell to run the staging Task. The Task downloads buildpacks and if present, the app’s buildpack cache. It then uses the buildpack that is detected automatically or specified with the -b flag to build the droplet. The Task uses the instructions in the buildpack to stage the application.
Droplet = (Application + Buildpack)
Buildpack= (Appserver + Libraries + Runtime)

Q8) • What are the purposes of the two data stores used by the Cloud Controller?
https://cloudacademy.com/blog/cloud-foundry-components/
The Cloud Controller provides REST API endpoints for clients to access the system. The Cloud Controller maintains a database with tables for orgs, spaces, services, user roles, and more.

Database (CC_DB)
The Cloud Controller database has been tested with Postgres.

Blobstore
The Cloud Controller manages blobstores for the following:
Resources: Files that are uploaded to the Cloud Controller with a unique SHA such that they can be reused without re-uploading the file
App Packages: Unstaged files that represent an application
Droplets: Result of taking an app package, staging it by processing a buildpack, and preparing it to run
Buildpacks: The buildpacks available to stage apps with
Buildpack Cache: Cached artifacts resulting from the staging process
